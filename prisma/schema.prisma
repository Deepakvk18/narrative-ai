// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GENDER {
  MALE
  FEMALE
  NONBINARY
  UNKNOWN
}

enum RELATIONSHIPS {
  // Family
  FATHER
  MOTHER
  SON
  DAUGHTER
  BROTHER
  SISTER
  GRANDFATHER
  GRANDMOTHER
  GRANDSON
  GRANDDAUGHTER
  UNCLE
  AUNT
  NEPHEW
  NIECE
  COUSIN
  STEPFATHER
  STEPMOTHER
  STEPSON
  STEPDAUGHTER
  STEPBROTHER
  STEPSISTER
  HALF_BROTHER
  HALF_SISTER
  FATHER_IN_LAW
  MOTHER_IN_LAW
  SON_IN_LAW
  DAUGHTER_IN_LAW
  BROTHER_IN_LAW
  SISTER_IN_LAW
  GODFATHER
  GODMOTHER
  GODSON
  GODDAUGHTER

  // Romantic
  SPOUSE
  HUSBAND
  WIFE
  FIANCE
  FIANCEE
  LOVER
  PARTNER
  EX_SPOUSE
  EX_HUSBAND
  EX_WIFE
  EX_FIANCE
  EX_FIANCEE
  EX_LOVER
  EX_PARTNER
  CRUSH
  ADMIRER
  SUITOR

  // Professional
  BOSS
  EMPLOYEE
  COWORKER
  COLLEAGUE
  MENTOR
  MENTEE
  TEACHER
  STUDENT
  MASTER
  APPRENTICE
  ADVISOR
  ADVISEE
  CLIENT
  SERVICE_PROVIDER
  BUSINESS_PARTNER

  // Social
  FRIEND
  BEST_FRIEND
  ACQUAINTANCE
  NEIGHBOR
  ROOMMATE
  CLASSMATE
  TEAMMATE

  // Adversarial
  ENEMY
  RIVAL
  NEMESIS
  OPPONENT
  COMPETITOR
  BULLY
  VICTIM

  // Power Dynamics
  RULER
  SUBJECT
  LEADER
  FOLLOWER
  SUPERIOR
  SUBORDINATE
  CAPTOR
  CAPTIVE
  SERVANT
  GUARDIAN
  WARD

  // Story-specific
  ALLY
  SIDEKICK
  HENCHMAN
  MINION
  INFORMANT
  BETRAYER
  SAVIOR
  RESCUER
  RESCUEE

  // Abstract or Symbolic
  IDOL
  FAN
  INSPIRATION
  SUCCESSOR
  PREDECESSOR
  PROTEGE
  PATRON

  // Neutral or Undefined
  STRANGER
  UNKNOWN

  // Fictional or Supernatural
  CREATOR
  CREATION
  DEITY
  WORSHIPPER
  FAMILIAR
  SHAPESHIFTER_ALTERNATE

  // Time-based
  CHILDHOOD_FRIEND
  PAST_SELF
  FUTURE_SELF
  ANCESTOR
  DESCENDANT

  // Group-based
  FELLOW_MEMBER
  FELLOW_CITIZEN
  COMPATRIOT
  FELLOW_TRAVELER
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id           String            @id @default(cuid())
  name         String?
  email        String         @unique
  signupType   String
  image        String?
  password     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  projects     Project[]
  projectRights ProjectRight[]
  accounts      Account[]
  sessions      Session[]
}

model RolePermission {
  id          String    @id @default(cuid())
  role        Role @relation(fields: [roleId], references: [id])
  roleId      String
  permissions String
}

model Role {
  id   String    @id @default(cuid())
  role String
  permissionId Int
  permissions RolePermission[]
  projectRights ProjectRight[]
}

model ProjectRight {
  id         String     @id @default(cuid())
  project    Project @relation(fields: [projectId], references: [id])
  projectId  String
  user       User    @relation(fields: [userId], references: [id])
  userId     String
  role       Role    @relation(fields: [roleId], references: [id])
  roleId     String

  @@index([projectId])
  @@index([userId])
}

model Project {
  id           String            @id @default(cuid())
  name         String
  description  String
  summary      String
  createdBy    User           @relation(fields: [createdById], references: [id])
  createdById  String
  characters   Character[]
  eras         Era[]
  groups       Group[]
  projectRights ProjectRight[]
  places        Place[]
  occupations   Occupation[]

  @@index([createdById])
}

model Arc {
  id                String                     @id @default(cuid())
  name              String
  backstory         String
  summary           String
  places            Place[]
  era               Era                     @relation(fields: [eraId], references: [id])
  eraId             String
  timeline          String
  chapters          Chapter[] 
}

model Character {
  id                String                     @id @default(cuid())
  project           Project                 @relation(fields: [projectId], references: [id])
  projectId         String
  name              String
  backstory         String
  gender            GENDER
  isHuman           Boolean                 @default(true)
  characterTimeline CharacterProgression[]
  owns              Place[]
  family            Family[]
  powerMoves        PowerMove[]
  nickNames         NickNames[]
  era               Era                     @relation(fields: [eraId], references: [id])
  eraId             String

  @@index([projectId])
}

model NickNames {
  id                String                     @id @default(cuid())
  character         Character               @relation(fields: [characterId], references: [id])
  characterId       String
  nickname          String
  reason            String
}

model Occupation {
  id                String                     @id @default(cuid())
  project           Project                 @relation(fields: [projectId], references: [id])
  projectId         String
  name              String
  description       String
  members           CharacterProgression[]
}

model CharacterProgression {
  id                String                     @id @default(cuid())
  age               String
  occupation        Occupation              @relation(fields: [occupationId], references: [id])
  occupationId      String
  character         Character               @relation(fields: [characterId], references: [id])
  characterId       String
  characterType     CharacterType           @relation(fields: [characterTypeId], references: [id])
  characterTypeId   String
  imageCharacters   ImageExcerpt[]
  excerptCharacters ExcerptCharacter[]
  clothes           Clothes[]
  images            CharacterImage[]
  relationships     CharacterRelationship[] @relation("CharacterRelationships")
  relatedTo         CharacterRelationship[] @relation("RelatedCharacters")
  ownsArtifacts     ArtifactsAndWeapons[] 
  groups            Group[]
  goals             String
  fears             String
  desires           String
}

model Family {
  id         String         @id @default(cuid())
  name       String
  history    String
  ownsPlace  Place[]
  members    Character[]
  artifactsAndWeapons ArtifactsAndWeapons[]
}

model CharacterType {
  id         String         @id @default(cuid())
  type       String
  characters CharacterProgression[]
}

model CharacterRelationship {
  id                 String        @id @default(cuid())
  character          CharacterProgression  @relation("CharacterRelationships", fields: [characterProgressionId], references: [id])
  characterProgressionId        String
  relatedCharacter   CharacterProgression  @relation("RelatedCharacters", fields: [relatedCharacterProgressionId], references: [id])
  relatedCharacterProgressionId String
  relationship       RELATIONSHIPS

  @@index([characterProgressionId])
  @@index([relatedCharacterProgressionId])
}

model Chapter {
  id              String              @id @default(cuid())
  arc             Arc              @relation(fields: [arcId], references: [id])
  arcId           String
  placeId         Int
  name            String
  number          Int
  createdAt       DateTime         @default(now())
  images          Panel[]
  chapterExcerpts ChapterExcerpt[]

  @@index([arcId])
}

model Group {
  id        String     @id @default(cuid())
  name      String
  leader    Int
  motto     String
  isVillain Boolean @default(false)
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
  ownsPlace      Place[]
  ownsArtifacts ArtifactsAndWeapons[]
  members   CharacterProgression[]
  aconflicts Conflict[]       @relation("AttackGroup")
  dconflicts  Conflict[]      @relation("DefenseGroup")

  @@index([projectId])
}

model Panel {
  id               String              @id @default(cuid())
  chapter          Chapter          @relation(fields: [chapterId], references: [id])
  chapterId        String
  imageIndex       Int
  imageUrl         String
  subPlace         SubPlace         @relation(fields: [placeId], references: [id])
  placeId          String
  imageCharacters  ImageExcerpt[]

  @@index([chapterId])
}

model ImageExcerpt {
  id          String       @id @default(cuid())
  image       Panel     @relation(fields: [imageId], references: [id])
  imageId     String
  character   CharacterProgression @relation(fields: [characterProgressionId], references: [id])
  characterProgressionId String
  imageRole   String

  @@index([imageId])
  @@index([characterProgressionId])
}

model ChapterExcerpt {
  id            String                @id @default(cuid())
  chapter       Chapter            @relation(fields: [chapterId], references: [id])
  chapterId     String
  excerptIndex  Int
  excerpt       String
  excerptCharacters ExcerptCharacter[]

  @@index([chapterId])
}

model ExcerptCharacter {
  id          String            @id @default(cuid())
  excerpt     ChapterExcerpt @relation(fields: [excerptId], references: [id])
  excerptId   String
  character   CharacterProgression      @relation(fields: [characterProgressionId], references: [id])
  characterProgressionId String
  role        String

  @@index([excerptId])
  @@index([characterProgressionId])
}

model Place {
  id                 String           @id @default(cuid())
  project            Project       @relation(fields: [projectId], references: [id])
  projectId          String
  history            String
  ownedByCharacter   Character     @relation(fields: [ownedByCharacterId], references: [id])
  ownedByCharacterId String
  ownedByFamily      Family   @relation(fields: [ownedByFamilyId], references: [id])
  ownedByFamilyId    String
  ownedByGroup       Group        @relation(fields: [ownedByGroupId], references: [id])
  ownedByGroupId     String
  subPlaces          SubPlace[]
  arcs               Arc[]
}

model SubPlace {
  id          String           @id @default(cuid())
  place       Place         @relation(fields: [placeId], references: [id])
  placeId     String
  name        String
  history     String
  panels      Panel[]
  subPlaceProgression SubPlaceProgression[]
}

model Era {
  id          String           @id @default(cuid())
  project     Project       @relation(fields: [projectId], references: [id])
  projectId   String
  timeline    String
  description String
  significantEvents String
  arc         Arc[]
  characters  Character[]
  conflicts   Conflict[]
  events      Event[]
}

model SubPlaceProgression {
  id          String           @id @default(cuid())
  place       SubPlace      @relation(fields: [subPlaceId], references: [id])
  subPlaceId  String
  era         String
  name        String
  history     String
  images      PlaceImage[]
}

model CharacterImage {
  id          String           @id @default(cuid())
  character   CharacterProgression     @relation(fields: [characterProgressionId], references: [id])
  characterProgressionId String
  imageUrl    String
}

model PlaceImage {
  id          String           @id @default(cuid())
  subPlace    SubPlaceProgression         @relation(fields: [subPlaceId], references: [id])
  subPlaceId     String
  imageUrl    String
}

model Clothes {
  id          String           @id @default(cuid())
  name        String
  characters  CharacterProgression[]
  image       String
}

model PowerSystem {
  id          String           @id @default(cuid())
  name        String
  history     String
  explanation String
  types       PowerType[]
}

model PowerType {
  id          String           @id @default(cuid())
  name        String
  history     String
  explanation String
  powerSystem PowerSystem  @relation(fields: [powerSystemId], references: [id])
  powerSystemId String
  moves    PowerMove[]
}

model PowerMove {
  id          String           @id @default(cuid())
  powerType   PowerType     @relation(fields: [powerTypeId], references: [id])
  powerTypeId String
  name        String
  history     String
  limitations String
  sideEffects String
  createdById Int
  users       Character[]
  explanation String
  images      PowerMoveImage[]
}

model PowerMoveImage {
  id          String           @id @default(cuid())
  powerMove   PowerMove     @relation(fields: [powerMoveId], references: [id])
  powerMoveId String
  image       String
}

model Conflict {
  id          String           @id @default(cuid())
  era         Era           @relation(fields: [eraId], references: [id])     
  eraId       String
  history     String
  attackGroup Group         @relation("AttackGroup", fields: [attackgroupid], references: [id])
  attackgroupid String
  attackMotivation  String
  defensiveGroup  Group     @relation("DefenseGroup", fields: [defensiveGroupId], references: [id])
  defensiveGroupId  String
}

model ArtifactsAndWeapons {
  id          String           @id @default(cuid())
  name        String
  speciality  String
  ownedByGroup       Group               @relation(fields: [ownedByGroupId], references: [id])
  ownedByGroupId     String
  ownedByCharacter   CharacterProgression @relation(fields: [ownedByCharacterId], references: [id])
  ownedByFamilyId    String
  ownedByFamily      Family               @relation(fields: [ownedByFamilyId], references: [id])
  ownedByCharacterId String
}

model Event {
  id          String       @id @default(cuid())
  name        String
  description String
  era         Era       @relation(fields: [eraId], references: [id])
  eraId       String
}
